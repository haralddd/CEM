Base.show(io::IO, ::SurfaceParams) = print(io, "SurfaceParams")
Base.show(io::IO, ::FlatSurfaceParams) = print(io, "FlatSurfaceParams()")
Base.show(io::IO, s::GaussianSurfaceParams) = print(io, "GaussianSurfaceParams(d=$(s.d), a=$(s.a))")
Base.show(io::IO, s::SingleBumpSurfaceParams) = print(io, "SingleBumpSurfaceParams(d=$(s.d), a=$(s.a))")
Base.show(io::IO, s::RectSurfaceParams) = print(io, "RectSurfaceParams(d=$(s.d), km=$(s.km), kp=$(s.kp))")
Base.show(rp::RayleighParams) = print("RayleighParams($(["\n\t$(k)=$(v)" for (k, v) in scaled_params(rp)]...)\n)")

Base.display(rp::RayleighParams) = Base.show(rp)


Base.parse(::Type{Polarization}, str::String) = str == "p" ? p :
                                                str == "s" ? s :
                                                error("Unknown polarization: $str")
"Parse string as generated by `Base.show`"
function Base.parse(::Type{SurfaceParams}, str::String)::SurfaceParams
    name, params = split(str, '(')
    params = split(strip(params, ")"), ',')
    return name == "SurfaceParams" ? SurfaceParams :
           name == "FlatSurfaceParams()" ? FlatSurfaceParams() :
           name == "GaussianSurfaceParams" ? GaussianSurfaceParams(parse.(Float64, params)...) :
           name == "SingleBumpSurfaceParams" ? GaussianSurfaceParams(parse.(Float64, params)...) :
           name == "RectSurfaceParams" ? GaussianSurfaceParams(parse.(Float64, params)...) :
           error("Unknown surface: $str")
end

function Base.convert(::Type{Dict}, rp::RayleighParams)::Dict
    return Dict(
        :nu => rp.nu,
        :eps => rp.eps,
        :mu => rp.mu,
        :lambda => rp.lambda,
        :omega => rp.omega,
        :Q => rp.Q,
        :ks => rp.ks,
        :Nq => rp.Nq,
        :Lx => rp.Lx,
        :Ni => rp.Ni,
        :surf => rp.surf,
        :seed => rp.seed
    )
end

function Base.convert(::Type{RayleighParams}, d::Dict)::RayleighParams
    return RayleighParams(;
        nu=d[:nu],
        eps=d[:eps],
        mu=d[:mu],
        lambda=d[:lambda],
        Q=d[:Q],
        ks=d[:ks],
        Nq=d[:Nq],
        L=d[:Lx],
        Ni=d[:Ni],
        surf=d[:surf],
        seed=d[:seed],
        rescale=false
    )
end

function save_to(rp::RayleighParams, label::String)
    filename = join([label, ".jld2"])
    save(filename, "struct", convert(Dict, rp))
    # save(filename, "RayleighParamsDescription", rp)
end

function load_rp_desc(file_path::String)::RayleighParams
    return load(file_path)["struct"]
end

function load_rp_struct(file_path::String)::RayleighParams
    return convert(RayleighParams, load(file_path)["struct"])
end

function surface_prompt()
    print("Surface type [flat|gaussian|singlebump|rect(West O'Donnell)] (=gaussian): ")
    input = readline()
    input = input == "" ? "gaussian" : input

    if input == "rect"
        print("West O'Donnell RMS height, δ [nm] (=5.0): ")
        input = readline()
        d = parse(Float64, input == "" ? "5.0" : input) * 1e-9

        print("West O'Donnell lower cutoff, k- [scaled to omega/c] (=0.8): ")
        input = readline()
        km = parse(Float64, input == "" ? "0.8" : input)

        print("West O'Donnell upper cutoff, k+ [scaled to omega/c] (=1.2): ")
        input = readline()
        kp = parse(Float64, input == "" ? "1.2" : input)

        return RectSurfaceParams(d, km, kp)
    elseif input == "gaussian"
        print("Gaussian RMS height, δ [nm] (=5.0): ")
        input = readline()
        d = parse(Float64, input == "" ? "5.0" : input) * 1e-9

        print("Gaussian correlation length, a [nm] (=1.0): ")
        input = readline()
        a = parse(Float64, input == "" ? "1.0" : input) * 1e-9

        return GaussianSurfaceParams(d, a)
    elseif input == "singlebump"
        print("Single bump RMS height, δ [nm] (=5.0): ")
        input = readline()
        d = parse(Float64, input == "" ? "5.0" : input) * 1e-9

        print("Single bump correlation length, a [nm] (=1.0): ")
        input = readline()
        a = parse(Float64, input == "" ? "1.0" : input) * 1e-9

        return SingleBumpSurfaceParams(d, a)
    else
        return FlatSurfaceParams()
    end
end

function config_creation_prompt()::Tuple{RayleighParams,SimulationPreAlloc}
    print("Input for solver parameters input RayleighParams struct\n")
    print("Polarization [p|s] (=p): ")
    input = readline()
    nu = parse(Polarization, input == "" ? "p" : input)

    print("eps [X+Yim] (=2.25): ")
    input = readline()
    eps = parse(ComplexF64, input == "" ? "2.25" : input)

    print("mu [X+Yim] (=1.0): ")
    input = readline()
    mu = parse(ComplexF64, input == "" ? "1.0" : input)

    print("lambda [nm] (=632.8): ")
    input = readline()
    lambda = parse(Float64, input == "" ? "632.8" : input) * 1e-9

    print("Q [multiple of omega/c] (=4): ")
    input = readline()
    Q = parse(Int64, input == "" ? "4" : input)

    print("angles [list of deg <0,1,2...> OR range <0:1:10> OR \"fresnel\"] (=0:10:20): ")
    input = readline()
    if input == "fresnel"
        angles = 0.0:0.5:90.0
    elseif contains(input, ':') # Range input
        from, step, to = parse.(Float64, split(input == "" ? "0:10:20" : input, ':'))
        angles = from:step:to
    else
        angles = parse.(Int64, split(input == "" ? "0, 10, 20" : input, ','))
    end

    print("Nq (=1024): ")
    input = readline()
    Nq = parse(Int64, input == "" ? "1024" : input)

    print("L [multiple of lambda] (=100): ")
    input = readline()
    L = parse(Float64, input == "" ? "100" : input) * lambda

    print("Ni (=10): ")
    input = readline()
    Ni = parse(Int64, input == "" ? "10" : input)

    surf = surface_prompt()

    rp = RayleighParams(
        nu=nu,
        eps=eps,
        mu=mu,
        lambda=lambda,
        Q=Q,
        Nq=Nq,
        ks=sind.(angles),
        L=L,
        Ni=Ni,
        surf=surf
    )

    print("Save config to file? [y|n] (=n): ")
    input = readline()
    if input == "y"
        print("Filename: ")
        input = readline()
        save_as(rp, joinpath(["input", input]))
    end

    sp = SimulationPreAlloc(Nq, length(angles))

    return rp, sp
end


"For debug purposes, mostly"
function config_default_creation()::Tuple{RayleighParams,SimulationPreAlloc}
    rp = RayleighParams(
        nu=p,
        eps=ComplexF64(2.25),
        mu=ComplexF64(1.0),
        lambda=632.8e-9,
        Q=4,
        Nq=1024,
        ks=[0.0, 45.0, 90.0],
        L=1.0e-5,
        Ni=10,
        surf=GaussianSurfaceParams(5.0e-9, 1.0e-9)
    )

    sp = SimulationPreAlloc(rp.Nq, length(rp.ks))

    return rp, sp
end


